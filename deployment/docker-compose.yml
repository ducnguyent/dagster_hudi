version: "3.8"

networks:
  dagster_hudi_network:
    external: true
    name: dagster_hudi_network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  dagster_code:
    build:
      context: ..
      dockerfile: ./deployment/Dockerfile.dagster_code
      args:
        - SPARK_IMAGE=${SPARK_IMAGE_NAME}:${SPARK_IMAGE_TAG}
        - HUDI_VERSION=${HUDI_VERSION}
    container_name: dagster_code
    image: dagster_code_image
    restart: always
    env_file:
      - .env
    environment:
      - DAGSTER_CURRENT_IMAGE=dagster_code_image
      - SPARK_MASTER_URL=spark://${SPARK_MASTER_HOST}:${SPARK_MASTER_PORT}
    networks:
      - dagster_hudi_network

  # This service runs dagster-webserver, which loads user code from the user code container.
  dagster_webserver:
    build:
      context: ..
      dockerfile: ./deployment/Dockerfile.dagster
    container_name: dagster_webserver
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint:
      - dagster-webserver
      - -h
      - '0.0.0.0'
      - -p
      - '${DAGSTER_WEBSERVER_PORT}'
      - -w
      - workspace.yaml
    expose:
      - '${DAGSTER_WEBSERVER_PORT}'
    ports:
      - "${DAGSTER_WEBSERVER_PORT}:${DAGSTER_WEBSERVER_PORT}"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    env_file:
      - .env
    networks:
      - dagster_hudi_network

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: ..
      dockerfile: ./deployment/Dockerfile.dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      dagster_code:
        condition: service_started
    env_file:
      - .env
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - dagster_hudi_network